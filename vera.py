import telebot
from telebot import types
import sqlite3


API_TOKEN = '8332629811:AAFkM9cE-W1a3abIWNMTADdfFi_L6dADpDc'
bot = telebot.TeleBot(API_TOKEN)
#todo –≠—Ç–æ –Ω–∞—Ä–æ–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–¥! –ü–æ–∫–∞ –æ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–µ —Ç—Ä–æ–≥–∞–π –µ–µ 
# # –ë–ê–ó–ê –î–ê–ù–ù–´–• 
def init_db():
    conn = sqlite3.connect('clients.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS clients (
            chat_id INTEGER PRIMARY KEY,
            name TEXT,
            lastname TEXT,
            phone TEXT
        )
    ''')
    conn.commit()
    conn.close()

def save_client(chat_id, name=None, lastname=None, age=None, phone=None):
    try:
        conn = sqlite3.connect('clients.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO clients (chat_id, name, lastname, age, phone)
            VALUES (?, ?, ?, ?, ?)
        ''', (chat_id, name, lastname, age, phone))
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")

def get_client(chat_id):
    try:
        conn = sqlite3.connect('clients.db')
        cursor = conn.cursor()
        cursor.execute('SELECT name, lastname, age, phone FROM clients WHERE chat_id = ?', (chat_id,))
        row = cursor.fetchone()
        conn.close()
        return row
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –ë–î: {e}")
        return None

init_db()

# –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['start'])
def start(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user_data = get_client(message.chat.id)

    if user_data:
        name, lastname, age, phone = user_data
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
        bot.send_message(
            message.chat.id,
            f'üíÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {name}!\n'
            '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n'
            '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî /mydata\n'
            '–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚Äî /record (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)'
        )
    else:
        # –ù–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å—Ç—Ä–µ—á–∞–µ–º
        bot.send_message(
            message.chat.id,
            'üíÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Malyar Studio*!\n'
            '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.',
            parse_mode='Markdown'
        )
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        btn = types.KeyboardButton('/reg')
        markup.add(btn)
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:', reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = ('---–ü–û–ú–û–©–¨---\n'
                 '/start ‚Äî –Ω–∞—á–∞—Ç—å\n'
                 '/help ‚Äî –ø–æ–º–æ—â—å\n'
                 '/reg ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n'
                 '/update - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
                 '"–ø—Ä–∏–≤–µ—Ç" ‚Äî –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è')
    bot.send_message(message.chat.id, help_text)
#todo –ø–æ–∫–∞ –±–æ—Ç –ª–æ–º–∞–µ—Ç—Å—è –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, —Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
@bot.message_handler(commands=['reg'])
def reg(message):
    user_data = get_client(message.chat.id)

    if user_data:
        # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        name, lastname, age, phone = user_data
        bot.send_message(
            message.chat.id,
            f'‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {name} {lastname}.\n'
            '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /update'
        )
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É
    bot.send_message(message.chat.id, '---–ê–ù–ö–ï–¢–ê---\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
    bot.register_next_step_handler(message, get_name)

@bot.message_handler(commands=['update'])
def update_data(message):
    bot.send_message(
        message.chat.id,
        ' –í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n'
        '–ù–∞—á–Ω—ë–º —Å –∏–º–µ–Ω–∏:'
    )
    bot.register_next_step_handler(message, get_name)
    
# –ò–º—è
def get_name(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç
    if message.content_type != 'text':
        bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.')
        bot.register_next_step_handler(message, get_name)
        return

    name = message.text.strip()
    if not name:
        bot.send_message(message.chat.id, '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
        bot.register_next_step_handler(message, get_name)
        return

    bot.send_message(message.chat.id, '–§–∞–º–∏–ª–∏—è:')
    bot.register_next_step_handler(message, get_lastname, name)

# –§–∞–º–∏–ª–∏—è
def get_lastname(message, name):
    if message.content_type != 'text':
        bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:')
        bot.register_next_step_handler(message, get_lastname, name)
        return

    lastname = message.text.strip()
    if not lastname:
        bot.send_message(message.chat.id, '–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
        bot.register_next_step_handler(message, get_lastname, name)
        return

    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ')
    bot.register_next_step_handler(message, get_number, name, lastname)

# –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def get_number(message, name, lastname):
    if message.content_type != 'text':
        bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º:')
        bot.register_next_step_handler(message, get_number, name, lastname)
        return

    try:
        age = message.text
        if  len(age) == 10:
            raise ValueError
    except:
        bot.send_message(message.chat.id, '–í–í–µ–¥–∏—Ç–µ 10 —Ü–∏—Ñ—Ä')
        bot.register_next_step_handler(message, get_number, name, lastname) # –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ –±–æ—Ç –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç 
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    save_client(message.chat.id, name=name, lastname=lastname, age=age)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text=' –î–∞', callback_data='confirm_yes')
    key_no = types.InlineKeyboardButton(text=' –ó–∞–Ω–æ–≤–æ', callback_data='confirm_no')
    keyboard.add(key_yes, key_no)

    bot.send_message(
        message.chat.id,
        f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {name}\n–§–∞–º–∏–ª–∏—è: {lastname}\n–í–æ–∑—Ä–∞—Å—Ç: {age}',
        reply_markup=keyboard
    )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ===
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == 'confirm_yes': 
        #todo –Ω–∞–¥–æ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–∞, –∞ —Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —á—Ç–æ –æ–Ω –ø–∏—à–µ—Ç, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª, –∞ –ø–æ —Ñ–∞–∫—Ç—É –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª 
        bot.send_message(call.message.chat.id, '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ.')
    elif call.data == 'confirm_no':
        bot.send_message(call.message.chat.id, '–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.')
        reg(call.message)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê ===
@bot.message_handler(content_types=['text'])
def text_handler(message):
    if message.text.lower() in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.')
    elif not message.text.startswith('/'):
        bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ /help.')

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ò–ö–ï–†–û–í, –§–û–¢–û, –ì–û–õ–û–°–û–í–´–• –ò –¢.–î. ===
@bot.message_handler(content_types=['sticker', 'photo', 'voice', 'video', 'document', 'audio', 'animation', 'video_note'])
def handle_unexpected_content(message):
    bot.send_message(
        message.chat.id,
        "–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã."
    )

# === –ó–ê–ü–£–°–ö ===
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.polling(none_stop=True, interval=0)